// CeruleanIR Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// skip over library functions 

    jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
__builtin__print__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int32 intToPrint);
__builtin__print__int32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints an int to the screen
// void print (int64 intToPrint);
__builtin__print__int64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float32 floatToPrint);
__builtin__print__float32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float64 floatToPrint);
__builtin__print__float64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
__builtin__print__char:
    // grab char
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
__builtin__print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
__builtin__println__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int32 intToPrint);
__builtin__println__int32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int64 intToPrint);
__builtin__println__int64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float32 floatToPrint);
__builtin__println__float32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float64 floatToPrint);
__builtin__println__float64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
__builtin__println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
__builtin__println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
__builtin__println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
__builtin__input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
__builtin__exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int32 exit_code)
// - exit_code : 
__builtin__exit__int32:
    // ** not implemented for amyasm
    halt

//========================================================================
// returns default float32 value
// float32 float32 ();
__builtin__float32:
    return 0.0

//========================================================================
// returns default float64 value
// float64 float64 ();
__builtin__float64:
    return 0.0

//========================================================================
// converts int32 to float32
// float32 int32ToFloat32 (int32);
__builtin__int32ToFloat32__int32:
    stackget val 0
    itof res val
    return res

//========================================================================
// converts int64 to float64
// float64 int64ToFloat64 (int64);
__builtin__int64ToFloat64__int64:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float32 from a given char[]
// float32 stringToFloat32 (char[]);
__builtin__stringToFloat32__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// parses a float64 from a given char[]
// float64 stringToFloat64 (char[]);
__builtin__stringToFloat64__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int32 value
// int32 int32 ();
__builtin__int32:
    return 0

//========================================================================
// returns default int64 value
// int64 int64 ();
__builtin__int64:
    return 0

//========================================================================
// returns default char value
// char char ();
__builtin__char:
    return '0'

//========================================================================
// converts float32 to int32
// int32 float32ToInt32 (float32);
__builtin__float32ToInt32__float32:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// converts float64 to int64
// int64 float64ToInt64 (float64);
__builtin__float64ToInt64__float64:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int32 from a given char[]
// int32 stringToInt32 (char[]);
__builtin__stringToInt32__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int64 from a given char[]
// int64 stringToInt64 (char[]);
__builtin__stringToInt64__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int32 from a given char
// int32 charToInt32 (char);
__builtin__charToInt32__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// parses an int64 from a given char
// int64 charToInt64 (char);
__builtin__charToInt64__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
__builtin__string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
__builtin__string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
__builtin__null:
    return __null

//========================================================================

__endOfLibrary:
   JUMP __end____main____main
__main____main:
__main__main__entry:
   MALLOC __str 20
   ASSIGN __str[0] 'E'
   ASSIGN __str[1] 'n'
   ASSIGN __str[2] 't'
   ASSIGN __str[3] 'e'
   ASSIGN __str[4] 'r'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'y'
   ASSIGN __str[7] 'o'
   ASSIGN __str[8] 'u'
   ASSIGN __str[9] 'r'
   ASSIGN __str[10] ' '
   ASSIGN __str[11] 'n'
   ASSIGN __str[12] 'a'
   ASSIGN __str[13] 'm'
   ASSIGN __str[14] 'e'
   ASSIGN __str[15] ' '
   ASSIGN __str[16] '='
   ASSIGN __str[17] '>'
   ASSIGN __str[18] ' '
   ASSIGN __str[19] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__0
   POP _arg0
   CALL __builtin__input
   RESPONSE __main__main__1
   ASSIGN __main__main__name __main__main__1
   MALLOC __str 8
   ASSIGN __str[0] 'H'
   ASSIGN __str[1] 'e'
   ASSIGN __str[2] 'l'
   ASSIGN __str[3] 'l'
   ASSIGN __str[4] 'o'
   ASSIGN __str[5] ','
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__2
   POP _arg0
   PUSH __main__main__name
   CALL __builtin__println__char__1
   RESPONSE __main__main__3
   POP _arg0
   MALLOC __str 21
   ASSIGN __str[0] 'E'
   ASSIGN __str[1] 'n'
   ASSIGN __str[2] 't'
   ASSIGN __str[3] 'e'
   ASSIGN __str[4] 'r'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'a'
   ASSIGN __str[7] 'n'
   ASSIGN __str[8] ' '
   ASSIGN __str[9] 'i'
   ASSIGN __str[10] 'n'
   ASSIGN __str[11] 't'
   ASSIGN __str[12] 'e'
   ASSIGN __str[13] 'g'
   ASSIGN __str[14] 'e'
   ASSIGN __str[15] 'r'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] '='
   ASSIGN __str[18] '>'
   ASSIGN __str[19] ' '
   ASSIGN __str[20] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__4
   POP _arg0
   CALL __builtin__input
   RESPONSE __main__main__5
   PUSH __main__main__5
   CALL __builtin__stringToInt32__char__1
   RESPONSE __main__main__6
   POP _arg0
   ASSIGN __main__main__intNumber __main__main__6
   PUSH __main__main__intNumber
   CALL __builtin__print__int32
   RESPONSE __main__main__7
   POP _arg0
   MALLOC __str 8
   ASSIGN __str[0] ' '
   ASSIGN __str[1] '*'
   ASSIGN __str[2] ' '
   ASSIGN __str[3] '2'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '='
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__8
   POP _arg0
   MULTIPLY __main__main__9 __main__main__intNumber 2
   PUSH __main__main__9
   CALL __builtin__println__int32
   RESPONSE __main__main__10
   POP _arg0
   MALLOC __str 34
   ASSIGN __str[0] 'E'
   ASSIGN __str[1] 'n'
   ASSIGN __str[2] 't'
   ASSIGN __str[3] 'e'
   ASSIGN __str[4] 'r'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'a'
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'f'
   ASSIGN __str[9] 'l'
   ASSIGN __str[10] 'o'
   ASSIGN __str[11] 'a'
   ASSIGN __str[12] 't'
   ASSIGN __str[13] 'i'
   ASSIGN __str[14] 'n'
   ASSIGN __str[15] 'g'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] 'p'
   ASSIGN __str[18] 'o'
   ASSIGN __str[19] 'i'
   ASSIGN __str[20] 'n'
   ASSIGN __str[21] 't'
   ASSIGN __str[22] ' '
   ASSIGN __str[23] 'n'
   ASSIGN __str[24] 'u'
   ASSIGN __str[25] 'm'
   ASSIGN __str[26] 'b'
   ASSIGN __str[27] 'e'
   ASSIGN __str[28] 'r'
   ASSIGN __str[29] ' '
   ASSIGN __str[30] '='
   ASSIGN __str[31] '>'
   ASSIGN __str[32] ' '
   ASSIGN __str[33] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__11
   POP _arg0
   CALL __builtin__input
   RESPONSE __main__main__12
   PUSH __main__main__12
   CALL __builtin__stringToFloat32__char__1
   RESPONSE __main__main__13
   POP _arg0
   ASSIGN __main__main__floatNumber __main__main__13
   PUSH __main__main__floatNumber
   CALL __builtin__print__float32
   RESPONSE __main__main__14
   POP _arg0
   MALLOC __str 10
   ASSIGN __str[0] ' '
   ASSIGN __str[1] '*'
   ASSIGN __str[2] ' '
   ASSIGN __str[3] '2'
   ASSIGN __str[4] '.'
   ASSIGN __str[5] '0'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] ' '
   ASSIGN __str[9] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__15
   POP _arg0
   MULTIPLY __main__main__16 __main__main__floatNumber 2.0
   PUSH __main__main__16
   CALL __builtin__println__float32
   RESPONSE __main__main__17
   POP _arg0
   RETURN 0
   RETURN 0
__end____main____main:
__start:
   CALL __main____main
   HALT
