function int32 @main () {
    block entry {
        %x.ptr = alloca (type(int32), int32(1))
        store (ptr(%x.ptr), int32(0), int32(10))
        %0 = call @__builtin__print__char__1 (ptr("x = 10 =>"))
        store (ptr(%x.ptr), int32(0), int32(10))
        %1 = call @__builtin__println__int32 (int32(10))
        %2 = call @__builtin__print__char__1 (ptr("x      =>"))
        %3 = load (type(int32), ptr(%x.ptr), int32(0))
        %4 = call @__builtin__println__int32 (int32(%3))
        %5 = call @__builtin__print__char__1 (ptr("x += 3 =>"))
        %6 = load (type(int32), ptr(%x.ptr), int32(0))
        %7 = add (int32(%6), int32(3))
        store (ptr(%x.ptr), int32(0), int32(%7))
        %8 = call @__builtin__println__int32 (int32(%7))
        %9 = call @__builtin__print__char__1 (ptr("x      =>"))
        %10 = load (type(int32), ptr(%x.ptr), int32(0))
        %11 = call @__builtin__println__int32 (int32(%10))
        %12 = call @__builtin__print__char__1 (ptr("x -= 3 =>"))
        %13 = load (type(int32), ptr(%x.ptr), int32(0))
        %14 = sub (int32(%13), int32(3))
        store (ptr(%x.ptr), int32(0), int32(%14))
        %15 = call @__builtin__println__int32 (int32(%14))
        %16 = call @__builtin__print__char__1 (ptr("x      =>"))
        %17 = load (type(int32), ptr(%x.ptr), int32(0))
        %18 = call @__builtin__println__int32 (int32(%17))
        %19 = call @__builtin__print__char__1 (ptr("x *= 3 =>"))
        %20 = load (type(int32), ptr(%x.ptr), int32(0))
        %21 = mul (int32(%20), int32(3))
        store (ptr(%x.ptr), int32(0), int32(%21))
        %22 = call @__builtin__println__int32 (int32(%21))
        %23 = call @__builtin__print__char__1 (ptr("x      =>"))
        %24 = load (type(int32), ptr(%x.ptr), int32(0))
        %25 = call @__builtin__println__int32 (int32(%24))
        %26 = call @__builtin__print__char__1 (ptr("x /= 3 =>"))
        %27 = load (type(int32), ptr(%x.ptr), int32(0))
        %28 = div (int32(%27), int32(3))
        store (ptr(%x.ptr), int32(0), int32(%28))
        %29 = call @__builtin__println__int32 (int32(%28))
        %30 = call @__builtin__print__char__1 (ptr("x      =>"))
        %31 = load (type(int32), ptr(%x.ptr), int32(0))
        %32 = call @__builtin__println__int32 (int32(%31))
        %33 = call @__builtin__print__char__1 (ptr("x %= 3 =>"))
        %34 = load (type(int32), ptr(%x.ptr), int32(0))
        %35 = mod (int32(%34), int32(3))
        store (ptr(%x.ptr), int32(0), int32(%35))
        %36 = call @__builtin__println__int32 (int32(%35))
        %37 = call @__builtin__print__char__1 (ptr("x      =>"))
        %38 = load (type(int32), ptr(%x.ptr), int32(0))
        %39 = call @__builtin__println__int32 (int32(%38))
        %40 = call @__builtin__print__char__1 (ptr("++x    =>"))
        %41 = load (type(int32), ptr(%x.ptr), int32(0))
        %42 = add (int32(%41), int32(1))
        store (ptr(%x.ptr), int32(0), int32(%42))
        %43 = call @__builtin__println__int32 (int32(%42))
        %44 = call @__builtin__print__char__1 (ptr("x      =>"))
        %45 = load (type(int32), ptr(%x.ptr), int32(0))
        %46 = call @__builtin__println__int32 (int32(%45))
        %47 = call @__builtin__print__char__1 (ptr("--x    =>"))
        %48 = load (type(int32), ptr(%x.ptr), int32(0))
        %49 = sub (int32(%48), int32(1))
        store (ptr(%x.ptr), int32(0), int32(%49))
        %50 = call @__builtin__println__int32 (int32(%49))
        %51 = call @__builtin__print__char__1 (ptr("x      =>"))
        %52 = load (type(int32), ptr(%x.ptr), int32(0))
        %53 = call @__builtin__println__int32 (int32(%52))
        %54 = call @__builtin__print__char__1 (ptr("x++    =>"))
        %55 = load (type(int32), ptr(%x.ptr), int32(0))
        %56 = add (int32(%55), int32(1))
        store (ptr(%x.ptr), int32(0), int32(%56))
        %57 = call @__builtin__println__int32 (int32(%55))
        %58 = call @__builtin__print__char__1 (ptr("x      =>"))
        %59 = load (type(int32), ptr(%x.ptr), int32(0))
        %60 = call @__builtin__println__int32 (int32(%59))
        %61 = call @__builtin__print__char__1 (ptr("x--    =>"))
        %62 = load (type(int32), ptr(%x.ptr), int32(0))
        %63 = sub (int32(%62), int32(1))
        store (ptr(%x.ptr), int32(0), int32(%63))
        %64 = call @__builtin__println__int32 (int32(%62))
        %65 = call @__builtin__print__char__1 (ptr("x      =>"))
        %66 = load (type(int32), ptr(%x.ptr), int32(0))
        %67 = call @__builtin__println__int32 (int32(%66))
        %68 = call @__builtin__print__char__1 (ptr("+x     =>"))
        %69 = load (type(int32), ptr(%x.ptr), int32(0))
        %70 = call @__builtin__println__int32 (int32(%69))
        %71 = call @__builtin__print__char__1 (ptr("x      =>"))
        %72 = load (type(int32), ptr(%x.ptr), int32(0))
        %73 = call @__builtin__println__int32 (int32(%72))
        %74 = call @__builtin__print__char__1 (ptr("-x     =>"))
        %75 = load (type(int32), ptr(%x.ptr), int32(0))
        %76 = sub (int32(0), int32(%75))
        %77 = call @__builtin__println__int32 (int32(%76))
        %78 = call @__builtin__print__char__1 (ptr("-(-x)  =>"))
        %79 = load (type(int32), ptr(%x.ptr), int32(0))
        %80 = sub (int32(0), int32(%79))
        %81 = sub (int32(0), int32(%80))
        %82 = call @__builtin__println__int32 (int32(%81))
        %83 = call @__builtin__print__char__1 (ptr("x      =>"))
        %84 = load (type(int32), ptr(%x.ptr), int32(0))
        %85 = call @__builtin__println__int32 (int32(%84))
        %86 = call @__builtin__print__char__1 (ptr("!x     =>"))
        %87 = load (type(int32), ptr(%x.ptr), int32(0))
        %88 = lnot (int32(%87))
        %89 = call @__builtin__println__int32 (int32(%88))
        %90 = call @__builtin__print__char__1 (ptr("!(x-1) =>"))
        %91 = load (type(int32), ptr(%x.ptr), int32(0))
        %92 = sub (int32(%91), int32(1))
        %93 = lnot (int32(%92))
        %94 = call @__builtin__println__int32 (int32(%93))
        %95 = call @__builtin__print__char__1 (ptr("x      =>"))
        %96 = load (type(int32), ptr(%x.ptr), int32(0))
        %97 = call @__builtin__println__int32 (int32(%96))
    }
}

