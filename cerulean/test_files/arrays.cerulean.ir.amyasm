// CeruleanIR Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// skip over library functions 

    jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
__builtin__print__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int32 intToPrint);
__builtin__print__int32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints an int to the screen
// void print (int64 intToPrint);
__builtin__print__int64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float32 floatToPrint);
__builtin__print__float32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float64 floatToPrint);
__builtin__print__float64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
__builtin__print__char:
    // grab char
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
__builtin__print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
__builtin__println__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int32 intToPrint);
__builtin__println__int32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int64 intToPrint);
__builtin__println__int64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float32 floatToPrint);
__builtin__println__float32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float64 floatToPrint);
__builtin__println__float64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
__builtin__println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
__builtin__println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
__builtin__println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
__builtin__input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
__builtin__exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int32 exit_code)
// - exit_code : 
__builtin__exit__int32:
    // ** not implemented for amyasm
    halt

//========================================================================
// returns default float32 value
// float32 float32 ();
__builtin__float32:
    return 0.0

//========================================================================
// returns default float64 value
// float64 float64 ();
__builtin__float64:
    return 0.0

//========================================================================
// converts int32 to float32
// float32 int32ToFloat32 (int32);
__builtin__int32ToFloat32__int32:
    stackget val 0
    itof res val
    return res

//========================================================================
// converts int64 to float64
// float64 int64ToFloat64 (int64);
__builtin__int64ToFloat64__int64:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float32 from a given char[]
// float32 stringToFloat32 (char[]);
__builtin__stringToFloat32__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// parses a float64 from a given char[]
// float64 stringToFloat64 (char[]);
__builtin__stringToFloat64__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int32 value
// int32 int32 ();
__builtin__int32:
    return 0

//========================================================================
// returns default int64 value
// int64 int64 ();
__builtin__int64:
    return 0

//========================================================================
// returns default char value
// char char ();
__builtin__char:
    return '0'

//========================================================================
// converts float32 to int32
// int32 float32ToInt32 (float32);
__builtin__float32ToInt32__float32:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// converts float64 to int64
// int64 float64ToInt64 (float64);
__builtin__float64ToInt64__float64:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int32 from a given char[]
// int32 stringToInt32 (char[]);
__builtin__stringToInt32__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int64 from a given char[]
// int64 stringToInt64 (char[]);
__builtin__stringToInt64__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int32 from a given char
// int32 charToInt32 (char);
__builtin__charToInt32__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// parses an int64 from a given char
// int64 charToInt64 (char);
__builtin__charToInt64__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
__builtin__string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
__builtin__string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
__builtin__null:
    return __null

//========================================================================

__endOfLibrary:
   JUMP __end____main____fill__int32__1__int32__int32__ptr__int32__int32
__main____fill__int32__1__int32__int32__ptr__int32__int32:
   STACKGET __main__fill__int32__1__int32__int32__array 0
   STACKGET __main__fill__int32__1__int32__int32__N 1
   STACKGET __main__fill__int32__1__int32__int32__value 2
__main__fill__int32__1__int32__int32__entry:
   MALLOC __main__fill__int32__1__int32__int32__array_ptr 1
   ASSIGN __main__fill__int32__1__int32__int32__array_ptr[0] __main__fill__int32__1__int32__int32__array
   MALLOC __main__fill__int32__1__int32__int32__N_ptr 1
   ASSIGN __main__fill__int32__1__int32__int32__N_ptr[0] __main__fill__int32__1__int32__int32__N
   MALLOC __main__fill__int32__1__int32__int32__value_ptr 1
   ASSIGN __main__fill__int32__1__int32__int32__value_ptr[0] __main__fill__int32__1__int32__int32__value
   MALLOC __main__fill__int32__1__int32__int32__i_ptr 1
   ASSIGN __main__fill__int32__1__int32__int32__i_ptr[0] 0
   JUMP __main__fill__int32__1__int32__int32__for_cond
__main__fill__int32__1__int32__int32__for_cond:
   ASSIGN __main__fill__int32__1__int32__int32__0 __main__fill__int32__1__int32__int32__i_ptr[0]
   ASSIGN __main__fill__int32__1__int32__int32__1 __main__fill__int32__1__int32__int32__N_ptr[0]
   LT __main__fill__int32__1__int32__int32__2, __main__fill__int32__1__int32__int32__0, __main__fill__int32__1__int32__int32__1
   CMP __main__fill__int32__1__int32__int32__2, 1 // set flag if cmp is true
   JEQ __main__fill__int32__1__int32__int32__for_body // jump to true block
   JUMP __main__fill__int32__1__int32__int32__for_end // otherwise jump to false block
__main__fill__int32__1__int32__int32__for_body:
   ASSIGN __main__fill__int32__1__int32__int32__3 __main__fill__int32__1__int32__int32__i_ptr[0]
   ASSIGN __main__fill__int32__1__int32__int32__4 __main__fill__int32__1__int32__int32__value_ptr[0]
   MULTIPLY __main__fill__int32__1__int32__int32__5 __main__fill__int32__1__int32__int32__3 __main__fill__int32__1__int32__int32__4
   ASSIGN __main__fill__int32__1__int32__int32__6 __main__fill__int32__1__int32__int32__array_ptr[0]
   ASSIGN __main__fill__int32__1__int32__int32__7 __main__fill__int32__1__int32__int32__i_ptr[0]
   ASSIGN __main__fill__int32__1__int32__int32__6[__main__fill__int32__1__int32__int32__7] __main__fill__int32__1__int32__int32__5
   JUMP __main__fill__int32__1__int32__int32__for_update
__main__fill__int32__1__int32__int32__for_update:
   ASSIGN __main__fill__int32__1__int32__int32__8 __main__fill__int32__1__int32__int32__i_ptr[0]
   ADD __main__fill__int32__1__int32__int32__9 __main__fill__int32__1__int32__int32__8 1
   ASSIGN __main__fill__int32__1__int32__int32__i_ptr[0] __main__fill__int32__1__int32__int32__9
   JUMP __main__fill__int32__1__int32__int32__for_cond
__main__fill__int32__1__int32__int32__for_end:
   RETURN 0
__end____main____fill__int32__1__int32__int32__ptr__int32__int32:
   JUMP __end____main____print__int32__1__int32__ptr__int32
__main____print__int32__1__int32__ptr__int32:
   STACKGET __main__print__int32__1__int32__array 0
   STACKGET __main__print__int32__1__int32__N 1
__main__print__int32__1__int32__entry:
   MALLOC __main__print__int32__1__int32__array_ptr 1
   ASSIGN __main__print__int32__1__int32__array_ptr[0] __main__print__int32__1__int32__array
   MALLOC __main__print__int32__1__int32__N_ptr 1
   ASSIGN __main__print__int32__1__int32__N_ptr[0] __main__print__int32__1__int32__N
   MALLOC __str 2
   ASSIGN __str[0] '['
   ASSIGN __str[1] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__print__int32__1__int32__0
   POP _arg0
   ASSIGN __main__print__int32__1__int32__1 __main__print__int32__1__int32__array_ptr[0]
   ASSIGN __main__print__int32__1__int32__2 __main__print__int32__1__int32__1[0]
   PUSH __main__print__int32__1__int32__2
   CALL __builtin__print__int32
   RESPONSE __main__print__int32__1__int32__3
   POP _arg0
   MALLOC __main__print__int32__1__int32__i_ptr 1
   ASSIGN __main__print__int32__1__int32__i_ptr[0] 1
   JUMP __main__print__int32__1__int32__for_cond
__main__print__int32__1__int32__for_cond:
   ASSIGN __main__print__int32__1__int32__4 __main__print__int32__1__int32__i_ptr[0]
   ASSIGN __main__print__int32__1__int32__5 __main__print__int32__1__int32__N_ptr[0]
   LT __main__print__int32__1__int32__6, __main__print__int32__1__int32__4, __main__print__int32__1__int32__5
   CMP __main__print__int32__1__int32__6, 1 // set flag if cmp is true
   JEQ __main__print__int32__1__int32__for_body // jump to true block
   JUMP __main__print__int32__1__int32__for_end // otherwise jump to false block
__main__print__int32__1__int32__for_body:
   MALLOC __str 3
   ASSIGN __str[0] ','
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__print__int32__1__int32__7
   POP _arg0
   ASSIGN __main__print__int32__1__int32__8 __main__print__int32__1__int32__array_ptr[0]
   ASSIGN __main__print__int32__1__int32__9 __main__print__int32__1__int32__i_ptr[0]
   ASSIGN __main__print__int32__1__int32__10 __main__print__int32__1__int32__8[__main__print__int32__1__int32__9]
   PUSH __main__print__int32__1__int32__10
   CALL __builtin__print__int32
   RESPONSE __main__print__int32__1__int32__11
   POP _arg0
   JUMP __main__print__int32__1__int32__for_update
__main__print__int32__1__int32__for_update:
   ASSIGN __main__print__int32__1__int32__12 __main__print__int32__1__int32__i_ptr[0]
   ADD __main__print__int32__1__int32__13 __main__print__int32__1__int32__12 1
   ASSIGN __main__print__int32__1__int32__i_ptr[0] __main__print__int32__1__int32__13
   JUMP __main__print__int32__1__int32__for_cond
__main__print__int32__1__int32__for_end:
   MALLOC __str 2
   ASSIGN __str[0] ']'
   ASSIGN __str[1] '\0'
   PUSH __str
   CALL __builtin__println__char__1
   RESPONSE __main__print__int32__1__int32__14
   POP _arg0
   RETURN 0
__end____main____print__int32__1__int32__ptr__int32:
   JUMP __end____main____main
__main____main:
__main__main__entry:
   ASSIGN __main__main__N 10
   MALLOC __main__main__0 __main__main__N
   ASSIGN __main__main__values __main__main__0
   PUSH 7
   PUSH __main__main__N
   PUSH __main__main__values
   CALL __main____fill__int32__1__int32__int32__ptr__int32__int32
   RESPONSE __main__main__1
   POP _arg0
   POP _arg1
   POP _arg2
   PUSH __main__main__N
   PUSH __main__main__values
   CALL __main____print__int32__1__int32__ptr__int32
   RESPONSE __main__main__2
   POP _arg0
   POP _arg1
   FREE __main__main__values
   RETURN 0
   RETURN 0
__end____main____main:
__start:
   CALL __main____main
   HALT
