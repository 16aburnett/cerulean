// CeruleanIR Built-in library
// Author: Amy Burnett
//========================================================================
// Global Builtin Variables

    assign __null 0

//========================================================================
// skip over library functions 

    jump __endOfLibrary

//========================================================================
// Prints a given string to the screen
// void print (char[] stringToPrint);
__builtin__print__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__print__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __print__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __print__char__1__loop
__print__char__1__endloop:
    return 0

//========================================================================
// Prints an int to the screen
// void print (int32 intToPrint);
__builtin__print__int32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints an int to the screen
// void print (int64 intToPrint);
__builtin__print__int64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float32 floatToPrint);
__builtin__print__float32:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a float to the screen
// void print (float64 floatToPrint);
__builtin__print__float64:
    stackget __str 0
    print __str
    return 0

//========================================================================
// Prints a char to the screen
// void print (char charToPrint);
__builtin__print__char:
    // grab char
    stackget __char 0
    print __char
    return 0

//========================================================================
// Prints an enum's integer value 
// void print (Enum e);
__builtin__print__Enum:
    stackget __e 0
    print __e
    return 0

//========================================================================
// Prints a given string to the screen with a newline at the end
// void println (char[] stringToPrint);
__builtin__println__char__1:
    // grab string
    stackget __str 0
    // print each char
    // init
    assign __i 0
__println__char__1__loop:
    // cond
    cmp __str[__i] 0
    jeq __println__char__1__endloop
    // Body
    print __str[__i]
    // update
    add __i __i 1
    // repeat
    jump __println__char__1__loop
__println__char__1__endloop:
    println
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int32 intToPrint);
__builtin__println__int32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints an int to the screen with a newline
// void println (int64 intToPrint);
__builtin__println__int64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float32 floatToPrint);
__builtin__println__float32:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a float to the screen with a newline
// void println (float64 floatToPrint);
__builtin__println__float64:
    stackget __str 0
    println __str
    return 0

//========================================================================
// Prints a char to the screen with a newline
// void println (char charToPrint);
__builtin__println__char:
    // grab string
    stackget __char 0
    println __char
    return 0

//========================================================================
// Prints an enum's integer value with a newline
// void println (Enum e);
__builtin__println__Enum:
    stackget __e 0
    println __e
    return 0

//========================================================================
// Prints a newline to the console
// void println ();
__builtin__println:
    println 
    return 0

//========================================================================
// grabs input from the console 
// char[] input ();
__builtin__input:
    input __line
    return __line

//========================================================================
// exits/stops the program 
__builtin__exit:
    halt

//========================================================================

// Exits the program with the given exit code 
// void exit(int32 exit_code)
// - exit_code : 
__builtin__exit__int32:
    // ** not implemented for amyasm
    halt

//========================================================================
// returns default float32 value
// float32 float32 ();
__builtin__float32:
    return 0.0

//========================================================================
// returns default float64 value
// float64 float64 ();
__builtin__float64:
    return 0.0

//========================================================================
// converts int32 to float32
// float32 int32ToFloat32 (int32);
__builtin__int32ToFloat32__int32:
    stackget val 0
    itof res val
    return res

//========================================================================
// converts int64 to float64
// float64 int64ToFloat64 (int64);
__builtin__int64ToFloat64__int64:
    stackget val 0
    itof res val
    return res

//========================================================================
// parses a float32 from a given char[]
// float32 stringToFloat32 (char[]);
__builtin__stringToFloat32__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// parses a float64 from a given char[]
// float64 stringToFloat64 (char[]);
__builtin__stringToFloat64__char__1:
    stackget val 0
    stof res val
    return res

//========================================================================
// returns default int32 value
// int32 int32 ();
__builtin__int32:
    return 0

//========================================================================
// returns default int64 value
// int64 int64 ();
__builtin__int64:
    return 0

//========================================================================
// returns default char value
// char char ();
__builtin__char:
    return '0'

//========================================================================
// converts float32 to int32
// int32 float32ToInt32 (float32);
__builtin__float32ToInt32__float32:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// converts float64 to int64
// int64 float64ToInt64 (float64);
__builtin__float64ToInt64__float64:
    stackget val 0
    ftoi res val
    return res

//========================================================================
// parses an int32 from a given char[]
// int32 stringToInt32 (char[]);
__builtin__stringToInt32__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int64 from a given char[]
// int64 stringToInt64 (char[]);
__builtin__stringToInt64__char__1:
    stackget val 0
    stoi res val
    return res

//========================================================================
// parses an int32 from a given char
// int32 charToInt32 (char);
__builtin__charToInt32__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// parses an int64 from a given char
// int64 charToInt64 (char);
__builtin__charToInt64__char:
    stackget val 0
    ctoi res val
    return res

//========================================================================
// converts int to string
// char[] string (int);
__builtin__string__int:
    stackget val 0
    string res val
    return res

//========================================================================
// converts float to string
// char[] string (float);
__builtin__string__float:
    stackget val 0
    string res val
    return res

//========================================================================

// returns default value for array and object (null)
// null null ();
__builtin__null:
    return __null

//========================================================================

__endOfLibrary:
   JUMP __end____main____main
__main____main:
__main__main__entry:
   MALLOC __str 11
   ASSIGN __str[0] 'L'
   ASSIGN __str[1] 'o'
   ASSIGN __str[2] 'g'
   ASSIGN __str[3] 'i'
   ASSIGN __str[4] 'c'
   ASSIGN __str[5] 'a'
   ASSIGN __str[6] 'l'
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'O'
   ASSIGN __str[9] 'R'
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__println__char__1
   RESPONSE __main__main__0
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '0'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '|'
   ASSIGN __str[3] '|'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '0'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__1
   POP _arg0
   NEQUAL __main__main__2, 0, 0
   MALLOC __main__main__lor_result1_ptr 1
   ASSIGN __main__main__lor_result1_ptr[0] __main__main__2
   CMP __main__main__2, 1 // set flag if cmp is true
   JEQ __main__main__lor_end1 // jump to true block
   JUMP __main__main__lor_rhs1 // otherwise jump to false block
__main__main__lor_rhs1:
   ASSIGN __main__main__3 0
   ASSIGN __main__main__lor_result1_ptr[0] __main__main__3
   JUMP __main__main__lor_end1
__main__main__lor_end1:
   ASSIGN __main__main__4 __main__main__lor_result1_ptr[0]
   PUSH __main__main__4
   CALL __builtin__println__int32
   RESPONSE __main__main__5
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '1'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '|'
   ASSIGN __str[3] '|'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '0'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__6
   POP _arg0
   NEQUAL __main__main__7, 1, 0
   MALLOC __main__main__lor_result2_ptr 1
   ASSIGN __main__main__lor_result2_ptr[0] __main__main__7
   CMP __main__main__7, 1 // set flag if cmp is true
   JEQ __main__main__lor_end2 // jump to true block
   JUMP __main__main__lor_rhs2 // otherwise jump to false block
__main__main__lor_rhs2:
   ASSIGN __main__main__8 0
   ASSIGN __main__main__lor_result2_ptr[0] __main__main__8
   JUMP __main__main__lor_end2
__main__main__lor_end2:
   ASSIGN __main__main__9 __main__main__lor_result2_ptr[0]
   PUSH __main__main__9
   CALL __builtin__println__int32
   RESPONSE __main__main__10
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '0'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '|'
   ASSIGN __str[3] '|'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '1'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__11
   POP _arg0
   NEQUAL __main__main__12, 0, 0
   MALLOC __main__main__lor_result3_ptr 1
   ASSIGN __main__main__lor_result3_ptr[0] __main__main__12
   CMP __main__main__12, 1 // set flag if cmp is true
   JEQ __main__main__lor_end3 // jump to true block
   JUMP __main__main__lor_rhs3 // otherwise jump to false block
__main__main__lor_rhs3:
   ASSIGN __main__main__13 1
   ASSIGN __main__main__lor_result3_ptr[0] __main__main__13
   JUMP __main__main__lor_end3
__main__main__lor_end3:
   ASSIGN __main__main__14 __main__main__lor_result3_ptr[0]
   PUSH __main__main__14
   CALL __builtin__println__int32
   RESPONSE __main__main__15
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '1'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '|'
   ASSIGN __str[3] '|'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '1'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__16
   POP _arg0
   NEQUAL __main__main__17, 1, 0
   MALLOC __main__main__lor_result4_ptr 1
   ASSIGN __main__main__lor_result4_ptr[0] __main__main__17
   CMP __main__main__17, 1 // set flag if cmp is true
   JEQ __main__main__lor_end4 // jump to true block
   JUMP __main__main__lor_rhs4 // otherwise jump to false block
__main__main__lor_rhs4:
   ASSIGN __main__main__18 1
   ASSIGN __main__main__lor_result4_ptr[0] __main__main__18
   JUMP __main__main__lor_end4
__main__main__lor_end4:
   ASSIGN __main__main__19 __main__main__lor_result4_ptr[0]
   PUSH __main__main__19
   CALL __builtin__println__int32
   RESPONSE __main__main__20
   POP _arg0
   MALLOC __main__main__x_ptr 1
   ASSIGN __main__main__x_ptr[0] 1
   MALLOC __main__main__y_ptr 1
   ASSIGN __main__main__y_ptr[0] 0
   ASSIGN __main__main__21 __main__main__x_ptr[0]
   NEQUAL __main__main__22, __main__main__21, 0
   MALLOC __main__main__lor_result5_ptr 1
   ASSIGN __main__main__lor_result5_ptr[0] __main__main__22
   CMP __main__main__22, 1 // set flag if cmp is true
   JEQ __main__main__lor_end5 // jump to true block
   JUMP __main__main__lor_rhs5 // otherwise jump to false block
__main__main__lor_rhs5:
   ASSIGN __main__main__23 __main__main__y_ptr[0]
   ADD __main__main__24 __main__main__23 1
   ASSIGN __main__main__y_ptr[0] __main__main__24
   ASSIGN __main__main__25 __main__main__24
   ASSIGN __main__main__lor_result5_ptr[0] __main__main__25
   JUMP __main__main__lor_end5
__main__main__lor_end5:
   ASSIGN __main__main__26 __main__main__lor_result5_ptr[0]
   MALLOC __main__main__z_ptr 1
   ASSIGN __main__main__z_ptr[0] __main__main__26
   MALLOC __str 45
   ASSIGN __str[0] 'S'
   ASSIGN __str[1] 'h'
   ASSIGN __str[2] 'o'
   ASSIGN __str[3] 'r'
   ASSIGN __str[4] 't'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'c'
   ASSIGN __str[7] 'i'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] 'c'
   ASSIGN __str[10] 'u'
   ASSIGN __str[11] 'i'
   ASSIGN __str[12] 't'
   ASSIGN __str[13] ':'
   ASSIGN __str[14] ' '
   ASSIGN __str[15] 'x'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] '='
   ASSIGN __str[18] ' '
   ASSIGN __str[19] '1'
   ASSIGN __str[20] ';'
   ASSIGN __str[21] ' '
   ASSIGN __str[22] 'y'
   ASSIGN __str[23] ' '
   ASSIGN __str[24] '='
   ASSIGN __str[25] ' '
   ASSIGN __str[26] '0'
   ASSIGN __str[27] ';'
   ASSIGN __str[28] ' '
   ASSIGN __str[29] 'x'
   ASSIGN __str[30] ' '
   ASSIGN __str[31] '|'
   ASSIGN __str[32] '|'
   ASSIGN __str[33] ' '
   ASSIGN __str[34] '+'
   ASSIGN __str[35] '+'
   ASSIGN __str[36] 'y'
   ASSIGN __str[37] ';'
   ASSIGN __str[38] ' '
   ASSIGN __str[39] 'y'
   ASSIGN __str[40] ' '
   ASSIGN __str[41] '='
   ASSIGN __str[42] '>'
   ASSIGN __str[43] ' '
   ASSIGN __str[44] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__27
   POP _arg0
   ASSIGN __main__main__28 __main__main__y_ptr[0]
   PUSH __main__main__28
   CALL __builtin__println__int32
   RESPONSE __main__main__29
   POP _arg0
   ASSIGN __main__main__x_ptr[0] 0
   ASSIGN __main__main__y_ptr[0] 0
   ASSIGN __main__main__30 __main__main__x_ptr[0]
   NEQUAL __main__main__31, __main__main__30, 0
   MALLOC __main__main__lor_result6_ptr 1
   ASSIGN __main__main__lor_result6_ptr[0] __main__main__31
   CMP __main__main__31, 1 // set flag if cmp is true
   JEQ __main__main__lor_end6 // jump to true block
   JUMP __main__main__lor_rhs6 // otherwise jump to false block
__main__main__lor_rhs6:
   ASSIGN __main__main__32 __main__main__y_ptr[0]
   ADD __main__main__33 __main__main__32 1
   ASSIGN __main__main__y_ptr[0] __main__main__33
   ASSIGN __main__main__34 __main__main__33
   ASSIGN __main__main__lor_result6_ptr[0] __main__main__34
   JUMP __main__main__lor_end6
__main__main__lor_end6:
   ASSIGN __main__main__35 __main__main__lor_result6_ptr[0]
   ASSIGN __main__main__z_ptr[0] __main__main__35
   MALLOC __str 45
   ASSIGN __str[0] 'S'
   ASSIGN __str[1] 'h'
   ASSIGN __str[2] 'o'
   ASSIGN __str[3] 'r'
   ASSIGN __str[4] 't'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'c'
   ASSIGN __str[7] 'i'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] 'c'
   ASSIGN __str[10] 'u'
   ASSIGN __str[11] 'i'
   ASSIGN __str[12] 't'
   ASSIGN __str[13] ':'
   ASSIGN __str[14] ' '
   ASSIGN __str[15] 'x'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] '='
   ASSIGN __str[18] ' '
   ASSIGN __str[19] '0'
   ASSIGN __str[20] ';'
   ASSIGN __str[21] ' '
   ASSIGN __str[22] 'y'
   ASSIGN __str[23] ' '
   ASSIGN __str[24] '='
   ASSIGN __str[25] ' '
   ASSIGN __str[26] '0'
   ASSIGN __str[27] ';'
   ASSIGN __str[28] ' '
   ASSIGN __str[29] 'x'
   ASSIGN __str[30] ' '
   ASSIGN __str[31] '|'
   ASSIGN __str[32] '|'
   ASSIGN __str[33] ' '
   ASSIGN __str[34] '+'
   ASSIGN __str[35] '+'
   ASSIGN __str[36] 'y'
   ASSIGN __str[37] ';'
   ASSIGN __str[38] ' '
   ASSIGN __str[39] 'y'
   ASSIGN __str[40] ' '
   ASSIGN __str[41] '='
   ASSIGN __str[42] '>'
   ASSIGN __str[43] ' '
   ASSIGN __str[44] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__36
   POP _arg0
   ASSIGN __main__main__37 __main__main__y_ptr[0]
   PUSH __main__main__37
   CALL __builtin__println__int32
   RESPONSE __main__main__38
   POP _arg0
   MALLOC __str 12
   ASSIGN __str[0] 'L'
   ASSIGN __str[1] 'o'
   ASSIGN __str[2] 'g'
   ASSIGN __str[3] 'i'
   ASSIGN __str[4] 'c'
   ASSIGN __str[5] 'a'
   ASSIGN __str[6] 'l'
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'A'
   ASSIGN __str[9] 'N'
   ASSIGN __str[10] 'D'
   ASSIGN __str[11] '\0'
   PUSH __str
   CALL __builtin__println__char__1
   RESPONSE __main__main__39
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '0'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '&'
   ASSIGN __str[3] '&'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '0'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__40
   POP _arg0
   NEQUAL __main__main__41, 0, 0
   MALLOC __main__main__land_result7_ptr 1
   ASSIGN __main__main__land_result7_ptr[0] __main__main__41
   CMP __main__main__41, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs7 // jump to true block
   JUMP __main__main__land_end7 // otherwise jump to false block
__main__main__land_rhs7:
   ASSIGN __main__main__42 0
   ASSIGN __main__main__land_result7_ptr[0] __main__main__42
   JUMP __main__main__land_end7
__main__main__land_end7:
   ASSIGN __main__main__43 __main__main__land_result7_ptr[0]
   PUSH __main__main__43
   CALL __builtin__println__int32
   RESPONSE __main__main__44
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '1'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '&'
   ASSIGN __str[3] '&'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '0'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__45
   POP _arg0
   NEQUAL __main__main__46, 1, 0
   MALLOC __main__main__land_result8_ptr 1
   ASSIGN __main__main__land_result8_ptr[0] __main__main__46
   CMP __main__main__46, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs8 // jump to true block
   JUMP __main__main__land_end8 // otherwise jump to false block
__main__main__land_rhs8:
   ASSIGN __main__main__47 0
   ASSIGN __main__main__land_result8_ptr[0] __main__main__47
   JUMP __main__main__land_end8
__main__main__land_end8:
   ASSIGN __main__main__48 __main__main__land_result8_ptr[0]
   PUSH __main__main__48
   CALL __builtin__println__int32
   RESPONSE __main__main__49
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '0'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '&'
   ASSIGN __str[3] '&'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '1'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__50
   POP _arg0
   NEQUAL __main__main__51, 0, 0
   MALLOC __main__main__land_result9_ptr 1
   ASSIGN __main__main__land_result9_ptr[0] __main__main__51
   CMP __main__main__51, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs9 // jump to true block
   JUMP __main__main__land_end9 // otherwise jump to false block
__main__main__land_rhs9:
   ASSIGN __main__main__52 1
   ASSIGN __main__main__land_result9_ptr[0] __main__main__52
   JUMP __main__main__land_end9
__main__main__land_end9:
   ASSIGN __main__main__53 __main__main__land_result9_ptr[0]
   PUSH __main__main__53
   CALL __builtin__println__int32
   RESPONSE __main__main__54
   POP _arg0
   MALLOC __str 11
   ASSIGN __str[0] '1'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '&'
   ASSIGN __str[3] '&'
   ASSIGN __str[4] ' '
   ASSIGN __str[5] '1'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '='
   ASSIGN __str[8] '>'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__55
   POP _arg0
   NEQUAL __main__main__56, 1, 0
   MALLOC __main__main__land_result10_ptr 1
   ASSIGN __main__main__land_result10_ptr[0] __main__main__56
   CMP __main__main__56, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs10 // jump to true block
   JUMP __main__main__land_end10 // otherwise jump to false block
__main__main__land_rhs10:
   ASSIGN __main__main__57 1
   ASSIGN __main__main__land_result10_ptr[0] __main__main__57
   JUMP __main__main__land_end10
__main__main__land_end10:
   ASSIGN __main__main__58 __main__main__land_result10_ptr[0]
   PUSH __main__main__58
   CALL __builtin__println__int32
   RESPONSE __main__main__59
   POP _arg0
   MALLOC __main__main__a_ptr 1
   ASSIGN __main__main__a_ptr[0] 0
   MALLOC __main__main__b_ptr 1
   ASSIGN __main__main__b_ptr[0] 0
   ASSIGN __main__main__60 __main__main__a_ptr[0]
   NEQUAL __main__main__61, __main__main__60, 0
   MALLOC __main__main__land_result11_ptr 1
   ASSIGN __main__main__land_result11_ptr[0] __main__main__61
   CMP __main__main__61, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs11 // jump to true block
   JUMP __main__main__land_end11 // otherwise jump to false block
__main__main__land_rhs11:
   ASSIGN __main__main__62 __main__main__b_ptr[0]
   ADD __main__main__63 __main__main__62 1
   ASSIGN __main__main__b_ptr[0] __main__main__63
   ASSIGN __main__main__64 __main__main__63
   ASSIGN __main__main__land_result11_ptr[0] __main__main__64
   JUMP __main__main__land_end11
__main__main__land_end11:
   ASSIGN __main__main__65 __main__main__land_result11_ptr[0]
   MALLOC __main__main__c_ptr 1
   ASSIGN __main__main__c_ptr[0] __main__main__65
   MALLOC __str 45
   ASSIGN __str[0] 'S'
   ASSIGN __str[1] 'h'
   ASSIGN __str[2] 'o'
   ASSIGN __str[3] 'r'
   ASSIGN __str[4] 't'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'c'
   ASSIGN __str[7] 'i'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] 'c'
   ASSIGN __str[10] 'u'
   ASSIGN __str[11] 'i'
   ASSIGN __str[12] 't'
   ASSIGN __str[13] ':'
   ASSIGN __str[14] ' '
   ASSIGN __str[15] 'a'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] '='
   ASSIGN __str[18] ' '
   ASSIGN __str[19] '0'
   ASSIGN __str[20] ';'
   ASSIGN __str[21] ' '
   ASSIGN __str[22] 'b'
   ASSIGN __str[23] ' '
   ASSIGN __str[24] '='
   ASSIGN __str[25] ' '
   ASSIGN __str[26] '0'
   ASSIGN __str[27] ';'
   ASSIGN __str[28] ' '
   ASSIGN __str[29] 'a'
   ASSIGN __str[30] ' '
   ASSIGN __str[31] '&'
   ASSIGN __str[32] '&'
   ASSIGN __str[33] ' '
   ASSIGN __str[34] '+'
   ASSIGN __str[35] '+'
   ASSIGN __str[36] 'b'
   ASSIGN __str[37] ';'
   ASSIGN __str[38] ' '
   ASSIGN __str[39] 'b'
   ASSIGN __str[40] ' '
   ASSIGN __str[41] '='
   ASSIGN __str[42] '>'
   ASSIGN __str[43] ' '
   ASSIGN __str[44] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__66
   POP _arg0
   ASSIGN __main__main__67 __main__main__b_ptr[0]
   PUSH __main__main__67
   CALL __builtin__println__int32
   RESPONSE __main__main__68
   POP _arg0
   ASSIGN __main__main__a_ptr[0] 1
   ASSIGN __main__main__b_ptr[0] 0
   ASSIGN __main__main__69 __main__main__a_ptr[0]
   NEQUAL __main__main__70, __main__main__69, 0
   MALLOC __main__main__land_result12_ptr 1
   ASSIGN __main__main__land_result12_ptr[0] __main__main__70
   CMP __main__main__70, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs12 // jump to true block
   JUMP __main__main__land_end12 // otherwise jump to false block
__main__main__land_rhs12:
   ASSIGN __main__main__71 __main__main__b_ptr[0]
   ADD __main__main__72 __main__main__71 1
   ASSIGN __main__main__b_ptr[0] __main__main__72
   ASSIGN __main__main__73 __main__main__72
   ASSIGN __main__main__land_result12_ptr[0] __main__main__73
   JUMP __main__main__land_end12
__main__main__land_end12:
   ASSIGN __main__main__74 __main__main__land_result12_ptr[0]
   ASSIGN __main__main__c_ptr[0] __main__main__74
   MALLOC __str 45
   ASSIGN __str[0] 'S'
   ASSIGN __str[1] 'h'
   ASSIGN __str[2] 'o'
   ASSIGN __str[3] 'r'
   ASSIGN __str[4] 't'
   ASSIGN __str[5] ' '
   ASSIGN __str[6] 'c'
   ASSIGN __str[7] 'i'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] 'c'
   ASSIGN __str[10] 'u'
   ASSIGN __str[11] 'i'
   ASSIGN __str[12] 't'
   ASSIGN __str[13] ':'
   ASSIGN __str[14] ' '
   ASSIGN __str[15] 'a'
   ASSIGN __str[16] ' '
   ASSIGN __str[17] '='
   ASSIGN __str[18] ' '
   ASSIGN __str[19] '1'
   ASSIGN __str[20] ';'
   ASSIGN __str[21] ' '
   ASSIGN __str[22] 'b'
   ASSIGN __str[23] ' '
   ASSIGN __str[24] '='
   ASSIGN __str[25] ' '
   ASSIGN __str[26] '0'
   ASSIGN __str[27] ';'
   ASSIGN __str[28] ' '
   ASSIGN __str[29] 'a'
   ASSIGN __str[30] ' '
   ASSIGN __str[31] '&'
   ASSIGN __str[32] '&'
   ASSIGN __str[33] ' '
   ASSIGN __str[34] '+'
   ASSIGN __str[35] '+'
   ASSIGN __str[36] 'b'
   ASSIGN __str[37] ';'
   ASSIGN __str[38] ' '
   ASSIGN __str[39] 'b'
   ASSIGN __str[40] ' '
   ASSIGN __str[41] '='
   ASSIGN __str[42] '>'
   ASSIGN __str[43] ' '
   ASSIGN __str[44] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__75
   POP _arg0
   ASSIGN __main__main__76 __main__main__b_ptr[0]
   PUSH __main__main__76
   CALL __builtin__println__int32
   RESPONSE __main__main__77
   POP _arg0
   MALLOC __main__main__i_ptr 1
   ASSIGN __main__main__i_ptr[0] 0
   MALLOC __main__main__j_ptr 1
   ASSIGN __main__main__j_ptr[0] 0
__main__main__while_cond13:
   ASSIGN __main__main__78 __main__main__i_ptr[0]
   LT __main__main__79, __main__main__78, 10
   NEQUAL __main__main__80, __main__main__79, 0
   MALLOC __main__main__land_result14_ptr 1
   ASSIGN __main__main__land_result14_ptr[0] __main__main__80
   CMP __main__main__80, 1 // set flag if cmp is true
   JEQ __main__main__land_rhs14 // jump to true block
   JUMP __main__main__land_end14 // otherwise jump to false block
__main__main__land_rhs14:
   ASSIGN __main__main__81 __main__main__j_ptr[0]
   NEQUAL __main__main__82, __main__main__81, 3
   ASSIGN __main__main__83 __main__main__82
   ASSIGN __main__main__land_result14_ptr[0] __main__main__83
   JUMP __main__main__land_end14
__main__main__land_end14:
   ASSIGN __main__main__84 __main__main__land_result14_ptr[0]
   CMP __main__main__84, 1 // set flag if cmp is true
   JEQ __main__main__while_body13 // jump to true block
   JUMP __main__main__while_end13 // otherwise jump to false block
__main__main__while_body13:
   ASSIGN __main__main__85 __main__main__i_ptr[0]
   PUSH __main__main__85
   CALL __builtin__print__int32
   RESPONSE __main__main__86
   POP _arg0
   PUSH ' '
   CALL __builtin__print__char
   RESPONSE __main__main__87
   POP _arg0
   ASSIGN __main__main__88 __main__main__i_ptr[0]
   MOD __main__main__89 __main__main__88 2
   EQUAL __main__main__90, __main__main__89, 0
   CMP __main__main__90, 1 // set flag if cmp is true
   JEQ __main__main__if_body16 // jump to true block
   JUMP __main__main__if_end16 // otherwise jump to false block
__main__main__if_body16:
   ASSIGN __main__main__91 __main__main__j_ptr[0]
   ADD __main__main__92 __main__main__91 1
   ASSIGN __main__main__j_ptr[0] __main__main__92
   JUMP __main__main__if_end16
__main__main__if_end16:
   ASSIGN __main__main__93 __main__main__i_ptr[0]
   ADD __main__main__94 __main__main__93 1
   ASSIGN __main__main__i_ptr[0] __main__main__94
   JUMP __main__main__while_cond13
__main__main__while_end13:
   CALL __builtin__println
   RESPONSE __main__main__95
   MALLOC __str 12
   ASSIGN __str[0] 'L'
   ASSIGN __str[1] 'o'
   ASSIGN __str[2] 'g'
   ASSIGN __str[3] 'i'
   ASSIGN __str[4] 'c'
   ASSIGN __str[5] 'a'
   ASSIGN __str[6] 'l'
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'N'
   ASSIGN __str[9] 'O'
   ASSIGN __str[10] 'T'
   ASSIGN __str[11] '\0'
   PUSH __str
   CALL __builtin__println__char__1
   RESPONSE __main__main__96
   POP _arg0
   MALLOC __main__main__r_ptr 1
   ASSIGN __main__main__r_ptr[0] 0
   MALLOC __str 14
   ASSIGN __str[0] 'r'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '='
   ASSIGN __str[3] ' '
   ASSIGN __str[4] '0'
   ASSIGN __str[5] ';'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '='
   ASSIGN __str[11] '>'
   ASSIGN __str[12] ' '
   ASSIGN __str[13] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__97
   POP _arg0
   ASSIGN __main__main__98 __main__main__r_ptr[0]
   PUSH __main__main__98
   CALL __builtin__println__int32
   RESPONSE __main__main__99
   POP _arg0
   MALLOC __str 14
   ASSIGN __str[0] 'r'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '='
   ASSIGN __str[3] ' '
   ASSIGN __str[4] '0'
   ASSIGN __str[5] ';'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '!'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '='
   ASSIGN __str[11] '>'
   ASSIGN __str[12] ' '
   ASSIGN __str[13] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__100
   POP _arg0
   ASSIGN __main__main__101 __main__main__r_ptr[0]
   NOT __main__main__102, __main__main__101
   PUSH __main__main__102
   CALL __builtin__println__int32
   RESPONSE __main__main__103
   POP _arg0
   ASSIGN __main__main__r_ptr[0] 1
   MALLOC __str 14
   ASSIGN __str[0] 'r'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '='
   ASSIGN __str[3] ' '
   ASSIGN __str[4] '1'
   ASSIGN __str[5] ';'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] ' '
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '='
   ASSIGN __str[11] '>'
   ASSIGN __str[12] ' '
   ASSIGN __str[13] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__104
   POP _arg0
   ASSIGN __main__main__105 __main__main__r_ptr[0]
   PUSH __main__main__105
   CALL __builtin__println__int32
   RESPONSE __main__main__106
   POP _arg0
   MALLOC __str 14
   ASSIGN __str[0] 'r'
   ASSIGN __str[1] ' '
   ASSIGN __str[2] '='
   ASSIGN __str[3] ' '
   ASSIGN __str[4] '1'
   ASSIGN __str[5] ';'
   ASSIGN __str[6] ' '
   ASSIGN __str[7] '!'
   ASSIGN __str[8] 'r'
   ASSIGN __str[9] ' '
   ASSIGN __str[10] '='
   ASSIGN __str[11] '>'
   ASSIGN __str[12] ' '
   ASSIGN __str[13] '\0'
   PUSH __str
   CALL __builtin__print__char__1
   RESPONSE __main__main__107
   POP _arg0
   ASSIGN __main__main__108 __main__main__r_ptr[0]
   NOT __main__main__109, __main__main__108
   PUSH __main__main__109
   CALL __builtin__println__int32
   RESPONSE __main__main__110
   POP _arg0
   RETURN 0
   RETURN 0
__end____main____main:
__start:
   CALL __main____main
   HALT
