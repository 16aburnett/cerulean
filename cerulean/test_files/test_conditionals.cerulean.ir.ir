function int32 @min__int32__int32 (int32(%a), int32(%b)) {
    block entry {
        %a.ptr = alloca (type(int32), int32(1))
        store (ptr(%a.ptr), int32(0), int32(%a))
        %b.ptr = alloca (type(int32), int32(1))
        store (ptr(%b.ptr), int32(0), int32(%b))
        %0 = load (type(int32), ptr(%a.ptr), int32(0))
        %1 = load (type(int32), ptr(%b.ptr), int32(0))
        %2 = cle (int32(%0), int32(%1))
        jcmp (int32(%2), block(if_body1), block(if_end1))
    }
    block if_body1 {
        %3 = load (type(int32), ptr(%a.ptr), int32(0))
        return (int32(%3))
        jmp (block(if_end1))
    }
    block if_end1 {
        %4 = load (type(int32), ptr(%b.ptr), int32(0))
        return (int32(%4))
    }
}

function int32 @max__int32__int32 (int32(%a), int32(%b)) {
    block entry {
        %a.ptr = alloca (type(int32), int32(1))
        store (ptr(%a.ptr), int32(0), int32(%a))
        %b.ptr = alloca (type(int32), int32(1))
        store (ptr(%b.ptr), int32(0), int32(%b))
        %0 = load (type(int32), ptr(%a.ptr), int32(0))
        %1 = load (type(int32), ptr(%b.ptr), int32(0))
        %2 = cge (int32(%0), int32(%1))
        jcmp (int32(%2), block(if_body3), block(if_end3))
    }
    block if_body3 {
        %3 = load (type(int32), ptr(%a.ptr), int32(0))
        return (int32(%3))
        jmp (block(if_end3))
    }
    block if_end3 {
        %4 = load (type(int32), ptr(%b.ptr), int32(0))
        return (int32(%4))
    }
}

function int32 @main () {
    block entry {
        %x = value (int32(10))
        %0 = cgt (int32(%x), int32(10))
        jcmp (int32(%0), block(if_body5), block(elif_cond5x0))
    }
    block if_body5 {
        %1 = call @__builtin__println__char__1 (ptr("x > 10"))
        jmp (block(if_end5))
    }
    block elif_cond5x0 {
        %2 = ceq (int32(%x), int32(10))
        jcmp (int32(%2), block(elif_body5x0), block(else_body5))
    }
    block elif_body5x0 {
        %3 = call @__builtin__println__char__1 (ptr("x == 10"))
        jmp (block(if_end5))
    }
    block else_body5 {
        %4 = call @__builtin__println__char__1 (ptr("x < 10"))
        jmp (block(if_end5))
    }
    block if_end5 {
        %5 = call @min__int32__int32 (int32(7), int32(3))
        %6 = call @__builtin__println__int32 (int32(%5))
        %7 = call @max__int32__int32 (int32(7), int32(3))
        %8 = call @__builtin__println__int32 (int32(%7))
        return (int32(0))
    }
}

