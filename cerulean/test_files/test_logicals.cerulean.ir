function int32 @main () {
    block entry {
        %0 = call @__builtin__println__char__1 (ptr("Logical OR"))
        %1 = call @__builtin__print__char__1 (ptr("0 || 0 => "))
        %2 = cne (int32(0), int32(0))
        %lor_result1.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result1.ptr), int32(0), int32(%2))
        jcmp (int32(%2), block(lor_end1), block(lor_rhs1))
    }
    block lor_rhs1 {
        %3 = value (int32(0))
        store (ptr(%lor_result1.ptr), int32(0), int32(%3))
        jmp (block(lor_end1))
    }
    block lor_end1 {
        %4 = load (type(int32), ptr(%lor_result1.ptr), int32(0))
        %5 = call @__builtin__println__int32 (int32(%4))
        %6 = call @__builtin__print__char__1 (ptr("1 || 0 => "))
        %7 = cne (int32(1), int32(0))
        %lor_result2.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result2.ptr), int32(0), int32(%7))
        jcmp (int32(%7), block(lor_end2), block(lor_rhs2))
    }
    block lor_rhs2 {
        %8 = value (int32(0))
        store (ptr(%lor_result2.ptr), int32(0), int32(%8))
        jmp (block(lor_end2))
    }
    block lor_end2 {
        %9 = load (type(int32), ptr(%lor_result2.ptr), int32(0))
        %10 = call @__builtin__println__int32 (int32(%9))
        %11 = call @__builtin__print__char__1 (ptr("0 || 1 => "))
        %12 = cne (int32(0), int32(0))
        %lor_result3.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result3.ptr), int32(0), int32(%12))
        jcmp (int32(%12), block(lor_end3), block(lor_rhs3))
    }
    block lor_rhs3 {
        %13 = value (int32(1))
        store (ptr(%lor_result3.ptr), int32(0), int32(%13))
        jmp (block(lor_end3))
    }
    block lor_end3 {
        %14 = load (type(int32), ptr(%lor_result3.ptr), int32(0))
        %15 = call @__builtin__println__int32 (int32(%14))
        %16 = call @__builtin__print__char__1 (ptr("1 || 1 => "))
        %17 = cne (int32(1), int32(0))
        %lor_result4.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result4.ptr), int32(0), int32(%17))
        jcmp (int32(%17), block(lor_end4), block(lor_rhs4))
    }
    block lor_rhs4 {
        %18 = value (int32(1))
        store (ptr(%lor_result4.ptr), int32(0), int32(%18))
        jmp (block(lor_end4))
    }
    block lor_end4 {
        %19 = load (type(int32), ptr(%lor_result4.ptr), int32(0))
        %20 = call @__builtin__println__int32 (int32(%19))
        %x.ptr = alloca (type(int32), int32(1))
        store (ptr(%x.ptr), int32(0), int32(1))
        %y.ptr = alloca (type(int32), int32(1))
        store (ptr(%y.ptr), int32(0), int32(0))
        %21 = load (type(int32), ptr(%x.ptr), int32(0))
        %22 = cne (int32(%21), int32(0))
        %lor_result5.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result5.ptr), int32(0), int32(%22))
        jcmp (int32(%22), block(lor_end5), block(lor_rhs5))
    }
    block lor_rhs5 {
        %23 = load (type(int32), ptr(%y.ptr), int32(0))
        %24 = add (int32(%23), int32(1))
        store (ptr(%y.ptr), int32(0), int32(%24))
        %25 = value (int32(%24))
        store (ptr(%lor_result5.ptr), int32(0), int32(%25))
        jmp (block(lor_end5))
    }
    block lor_end5 {
        %26 = load (type(int32), ptr(%lor_result5.ptr), int32(0))
        %z.ptr = alloca (type(int32), int32(1))
        store (ptr(%z.ptr), int32(0), int32(%26))
        %27 = call @__builtin__print__char__1 (ptr("Short circuit: x = 1; y = 0; x || ++y; y => "))
        %28 = load (type(int32), ptr(%y.ptr), int32(0))
        %29 = call @__builtin__println__int32 (int32(%28))
        store (ptr(%x.ptr), int32(0), int32(0))
        store (ptr(%y.ptr), int32(0), int32(0))
        %30 = load (type(int32), ptr(%x.ptr), int32(0))
        %31 = cne (int32(%30), int32(0))
        %lor_result6.ptr = alloca (type(int32), int32(1))
        store (ptr(%lor_result6.ptr), int32(0), int32(%31))
        jcmp (int32(%31), block(lor_end6), block(lor_rhs6))
    }
    block lor_rhs6 {
        %32 = load (type(int32), ptr(%y.ptr), int32(0))
        %33 = add (int32(%32), int32(1))
        store (ptr(%y.ptr), int32(0), int32(%33))
        %34 = value (int32(%33))
        store (ptr(%lor_result6.ptr), int32(0), int32(%34))
        jmp (block(lor_end6))
    }
    block lor_end6 {
        %35 = load (type(int32), ptr(%lor_result6.ptr), int32(0))
        store (ptr(%z.ptr), int32(0), int32(%35))
        %36 = call @__builtin__print__char__1 (ptr("Short circuit: x = 0; y = 0; x || ++y; y => "))
        %37 = load (type(int32), ptr(%y.ptr), int32(0))
        %38 = call @__builtin__println__int32 (int32(%37))
        %39 = call @__builtin__println__char__1 (ptr("Logical AND"))
        %40 = call @__builtin__print__char__1 (ptr("0 && 0 => "))
        %41 = cne (int32(0), int32(0))
        %land_result7.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result7.ptr), int32(0), int32(%41))
        jcmp (int32(%41), block(land_rhs7), block(land_end7))
    }
    block land_rhs7 {
        %42 = value (int32(0))
        store (ptr(%land_result7.ptr), int32(0), int32(%42))
        jmp (block(land_end7))
    }
    block land_end7 {
        %43 = load (type(int32), ptr(%land_result7.ptr), int32(0))
        %44 = call @__builtin__println__int32 (int32(%43))
        %45 = call @__builtin__print__char__1 (ptr("1 && 0 => "))
        %46 = cne (int32(1), int32(0))
        %land_result8.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result8.ptr), int32(0), int32(%46))
        jcmp (int32(%46), block(land_rhs8), block(land_end8))
    }
    block land_rhs8 {
        %47 = value (int32(0))
        store (ptr(%land_result8.ptr), int32(0), int32(%47))
        jmp (block(land_end8))
    }
    block land_end8 {
        %48 = load (type(int32), ptr(%land_result8.ptr), int32(0))
        %49 = call @__builtin__println__int32 (int32(%48))
        %50 = call @__builtin__print__char__1 (ptr("0 && 1 => "))
        %51 = cne (int32(0), int32(0))
        %land_result9.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result9.ptr), int32(0), int32(%51))
        jcmp (int32(%51), block(land_rhs9), block(land_end9))
    }
    block land_rhs9 {
        %52 = value (int32(1))
        store (ptr(%land_result9.ptr), int32(0), int32(%52))
        jmp (block(land_end9))
    }
    block land_end9 {
        %53 = load (type(int32), ptr(%land_result9.ptr), int32(0))
        %54 = call @__builtin__println__int32 (int32(%53))
        %55 = call @__builtin__print__char__1 (ptr("1 && 1 => "))
        %56 = cne (int32(1), int32(0))
        %land_result10.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result10.ptr), int32(0), int32(%56))
        jcmp (int32(%56), block(land_rhs10), block(land_end10))
    }
    block land_rhs10 {
        %57 = value (int32(1))
        store (ptr(%land_result10.ptr), int32(0), int32(%57))
        jmp (block(land_end10))
    }
    block land_end10 {
        %58 = load (type(int32), ptr(%land_result10.ptr), int32(0))
        %59 = call @__builtin__println__int32 (int32(%58))
        %a.ptr = alloca (type(int32), int32(1))
        store (ptr(%a.ptr), int32(0), int32(0))
        %b.ptr = alloca (type(int32), int32(1))
        store (ptr(%b.ptr), int32(0), int32(0))
        %60 = load (type(int32), ptr(%a.ptr), int32(0))
        %61 = cne (int32(%60), int32(0))
        %land_result11.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result11.ptr), int32(0), int32(%61))
        jcmp (int32(%61), block(land_rhs11), block(land_end11))
    }
    block land_rhs11 {
        %62 = load (type(int32), ptr(%b.ptr), int32(0))
        %63 = add (int32(%62), int32(1))
        store (ptr(%b.ptr), int32(0), int32(%63))
        %64 = value (int32(%63))
        store (ptr(%land_result11.ptr), int32(0), int32(%64))
        jmp (block(land_end11))
    }
    block land_end11 {
        %65 = load (type(int32), ptr(%land_result11.ptr), int32(0))
        %c.ptr = alloca (type(int32), int32(1))
        store (ptr(%c.ptr), int32(0), int32(%65))
        %66 = call @__builtin__print__char__1 (ptr("Short circuit: a = 0; b = 0; a && ++b; b => "))
        %67 = load (type(int32), ptr(%b.ptr), int32(0))
        %68 = call @__builtin__println__int32 (int32(%67))
        store (ptr(%a.ptr), int32(0), int32(1))
        store (ptr(%b.ptr), int32(0), int32(0))
        %69 = load (type(int32), ptr(%a.ptr), int32(0))
        %70 = cne (int32(%69), int32(0))
        %land_result12.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result12.ptr), int32(0), int32(%70))
        jcmp (int32(%70), block(land_rhs12), block(land_end12))
    }
    block land_rhs12 {
        %71 = load (type(int32), ptr(%b.ptr), int32(0))
        %72 = add (int32(%71), int32(1))
        store (ptr(%b.ptr), int32(0), int32(%72))
        %73 = value (int32(%72))
        store (ptr(%land_result12.ptr), int32(0), int32(%73))
        jmp (block(land_end12))
    }
    block land_end12 {
        %74 = load (type(int32), ptr(%land_result12.ptr), int32(0))
        store (ptr(%c.ptr), int32(0), int32(%74))
        %75 = call @__builtin__print__char__1 (ptr("Short circuit: a = 1; b = 0; a && ++b; b => "))
        %76 = load (type(int32), ptr(%b.ptr), int32(0))
        %77 = call @__builtin__println__int32 (int32(%76))
        %i.ptr = alloca (type(int32), int32(1))
        store (ptr(%i.ptr), int32(0), int32(0))
        %j.ptr = alloca (type(int32), int32(1))
        store (ptr(%j.ptr), int32(0), int32(0))
    }
    block while_cond13 {
        %78 = load (type(int32), ptr(%i.ptr), int32(0))
        %79 = clt (int32(%78), int32(10))
        %80 = cne (int32(%79), int32(0))
        %land_result14.ptr = alloca (type(int32), int32(1))
        store (ptr(%land_result14.ptr), int32(0), int32(%80))
        jcmp (int32(%80), block(land_rhs14), block(land_end14))
    }
    block land_rhs14 {
        %81 = load (type(int32), ptr(%j.ptr), int32(0))
        %82 = cne (int32(%81), int32(3))
        %83 = value (int32(%82))
        store (ptr(%land_result14.ptr), int32(0), int32(%83))
        jmp (block(land_end14))
    }
    block land_end14 {
        %84 = load (type(int32), ptr(%land_result14.ptr), int32(0))
        jcmp (int32(%84), block(while_body13), block(while_end13))
    }
    block while_body13 {
        %85 = load (type(int32), ptr(%i.ptr), int32(0))
        %86 = call @__builtin__print__int32 (int32(%85))
        %87 = call @__builtin__print__char (char(' '))
        %88 = load (type(int32), ptr(%i.ptr), int32(0))
        %89 = mod (int32(%88), int32(2))
        %90 = ceq (int32(%89), int32(0))
        jcmp (int32(%90), block(if_body16), block(if_end16))
    }
    block if_body16 {
        %91 = load (type(int32), ptr(%j.ptr), int32(0))
        %92 = add (int32(%91), int32(1))
        store (ptr(%j.ptr), int32(0), int32(%92))
        jmp (block(if_end16))
    }
    block if_end16 {
        %93 = load (type(int32), ptr(%i.ptr), int32(0))
        %94 = add (int32(%93), int32(1))
        store (ptr(%i.ptr), int32(0), int32(%94))
        jmp (block(while_cond13))
    }
    block while_end13 {
        %95 = call @__builtin__println ()
        %96 = call @__builtin__println__char__1 (ptr("Logical NOT"))
        %r.ptr = alloca (type(int32), int32(1))
        store (ptr(%r.ptr), int32(0), int32(0))
        %97 = call @__builtin__print__char__1 (ptr("r = 0;  r => "))
        %98 = load (type(int32), ptr(%r.ptr), int32(0))
        %99 = call @__builtin__println__int32 (int32(%98))
        %100 = call @__builtin__print__char__1 (ptr("r = 0; !r => "))
        %101 = load (type(int32), ptr(%r.ptr), int32(0))
        %102 = lnot (int32(%101))
        %103 = call @__builtin__println__int32 (int32(%102))
        store (ptr(%r.ptr), int32(0), int32(1))
        %104 = call @__builtin__print__char__1 (ptr("r = 1;  r => "))
        %105 = load (type(int32), ptr(%r.ptr), int32(0))
        %106 = call @__builtin__println__int32 (int32(%105))
        %107 = call @__builtin__print__char__1 (ptr("r = 1; !r => "))
        %108 = load (type(int32), ptr(%r.ptr), int32(0))
        %109 = lnot (int32(%108))
        %110 = call @__builtin__println__int32 (int32(%109))
        return (int32(0))
    }
}

